#! /usr/bin/ksh -l
###############################################################################
#                              EXAMPLE.run
#
# Generated by $Id: mkexp 603 2019-05-14 09:36:41Z m221078 $
#
# $Id: DEFAULT.run.tmpl 9738 2019-02-13 12:52:03Z m221078 $
#
# $Id: DEFAULT.config 9564 2018-09-03 15:02:25Z m221078 $
# $Id: SETUP.config.in 9060 2017-04-21 17:32:03Z m221078 $
# $Id: piControl-LR.config 9558 2018-08-29 15:33:28Z m221078 $
# $Id: mistral.config 9460 2018-07-05 15:56:01Z m221078 $
#
###############################################################################

#
# Setup for mistral (SLURM)
#
# $Id: mistral.tmpl 9671 2018-12-19 10:26:35Z m221078 $
#
#SBATCH --job-name=piControl_wiso_v1.2_run
#SBATCH --partition=mpp
#SBATCH --exclusive
#SBATCH --nodes=12
#SBATCH --ntasks-per-node=36
#SBATCH --time=00:90:00
#SBATCH --output=piControl_wiso_v1.2_run_%j.log
#SBATCH --error=piControl_wiso_v1.2_run_%j.log
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=alexandre.cauquoin@awi.de
ulimit -s unlimited
ulimit -c unlimited

#INTEL
module list
module purge
module load intel.compiler
module load intel.mpi
module load netcdf/4.6.2_intel
module load cdo
module load centoslibs

# Memory tuning
#export MALLOC_MMAP_MAX_=0
export MALLOC_TRIM_THRESHOLD_=-1

# Intel OpenMP
export KMP_STACKSIZE=64m
export KMP_AFFINITY=verbose,granularity=fine,compact,1,0
# OpenMP
export OMP_NUM_THREADS=1
# Workaround for SLURM bug in chained jobs
SLURM_JOB_NAME=piControl_wiso_v1.2_run
sbatch () {
    unset SLURM_MEM_PER_CPU SLURM_NTASKS_PER_NODE
    command sbatch "$@"
}

[ -r piControl_wiso_v1.2.date ] && read DATE DUMMY < piControl_wiso_v1.2.date
scontrol update JobId=$SLURM_JOB_ID Comment="$DATE"

###############################################################################

DEBUG_LEVEL=${DEBUG_LEVEL:-0}

# Support log style output
export LANG=C
print () { command print "$(date +'%F %T'):" "$@"; }
print_re='^[0-9]+-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}'

warn () { print 'Hey:' "$@" >&2; }
die () { print 'Oops:' "$@" >&2; return 1; }

# Bail out on error
trap 'print Error at line $LINENO >&2' ERR
set -eu
# Print command info
[[ $DEBUG_LEVEL -ge 2 ]] && set -x

###############################################################################
#
#     USER INTERFACE
#
###############################################################################

#------------------------------------------------------------------------------
#   Configuration of component(s)
#------------------------------------------------------------------------------

ATM_LEVELS=47
ATM_RES=T63
ATMO_EXE=echam6
ATMO_RESTART_DIR=/work/ollie/acauquoi/mpi-esm-wiso/echam6/experiments/piControl_wiso_v1.2/restart/echam6
EXP_ID=${EXP_ID:-piControl_wiso_v1.2}
LAND_RESTART_DIR=/work/ollie/acauquoi/mpi-esm-wiso/echam6/experiments/piControl_wiso_v1.2/restart/jsbach
MODEL_DIR=/home/ollie/acauquoi/mpi-esm-wiso
OCE_RES=GR15
prevdate=${prevdate:-}
#---wiso-code
lwiso=true
if [ "${lwiso}" = "true" ]; then
  nwiso=3
else
  nwiso=0
fi
#---wiso-code-end


#------------------------------------------------------------------------------
# End of component configuration
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#   1.3 TIME CONTROL
#------------------------------------------------------------------------------

#-- calendar type: Available calendar options:
#     0   : No leap year (365 days per year)
#     1   : Gregorian (365/366 days per year)
#     n   : Equal months of "n" days (30 for 30 day months)

CALENDAR=1

#
#-- initial and final date of the experiment
#   Format: YearMMDD[_hh[mm[ss]]], Year-MM-DD[_hh[:mm[:ss]]] or 
#           Year-MM-DD[Thh[:mm[:ss]]]
#   Note: The experiment will not stop within a run/chunk even if the
#         final date is reached.

initial_date=1850-01-01 # initial date of the experiment
final_date=1909-12-31 # final date of the experiment

#
#-- duration of a run/chunk
#      Specify the length of each run in one of the below units.

integer nyear nmonth nday nhour nminute nsecond

nyear=0          # number of years per run
nmonth=12 # number of months per run
nday=0 # number of days per run
nhour=0          # number of hours per run
nminute=0        # number of minutes per run
nsecond=0        # number of seconds per run
nstep_atm=0      # number of atmosphere model time steps per run
nstep_oce=0      # number of ocean model time steps per run


#------------------------------------------------------------------------------
#   1.4 INITIAL SETTINGS
#------------------------------------------------------------------------------

ATMO_DISTURBED_YEARS=''
ATMO_DISTURBANCE=1.00001

#------------------------------------------------------------------------------
#   1.6 FILE SYSTEMS
#------------------------------------------------------------------------------
#
#-- MODEL_DIR: Root directory of the model code
#

MODEL_DIR=/home/ollie/acauquoi/mpi-esm-wiso

#
#-- BIN_DIR, SCRIPT_DIR:
#          Permanent file system for the SCRIPTS/BINARIES on the COMPUTING HOST
#          (only needs to be specified if the tasks are NOT generated on the 
#          computing host)

BIN_DIR=/home/ollie/acauquoi/mpi-esm-wiso/src/echam/bin
SCRIPT_DIR=/home/ollie/acauquoi/mpi-esm-wiso/experiments/echam6/piControl_wiso_v1.2/scripts

#
#-- *_INPUT_DIR: Directories of the LONG TERM INPUT data archive. It needs
#                to reside on the same machine as the output archive. This 
#                archive is intended for input data that is needed with 
#                several experiments, e.g. initial , forcing or restart files.
#                The parent-directory needs to exist before job submission.

ATMO_INPUT_DIR=/work/ollie/pool/ECHAM6/input/r0007
LAND_INPUT_DIR=/work/ollie/pool/JSBACH/input/r0010
HYDRO_INPUT_DIR=/work/ollie/pool/JSBACH/input/r0009/HD

#
#-- DATA_DIR, RESTART_DIR, LOG_DIR, MON_DIR: 
#          Directories of the SHORT TERM data server.
#          Model INPUT and OUTPUT will be read from/written to 
#          this file system of the computing host
#
#  - The parent-directory needs to exist before submission of the job 

DATA_DIR=/work/ollie/acauquoi/mpi-esm-wiso/echam6/experiments/piControl_wiso_v1.2/outdata
RESTART_DIR=/work/ollie/acauquoi/mpi-esm-wiso/echam6/experiments/piControl_wiso_v1.2/restart
LOG_DIR=/work/ollie/acauquoi/mpi-esm-wiso/echam6/experiments/piControl_wiso_v1.2/log
MON_DIR=/work/ollie/acauquoi/mpi-esm-wiso/echam6/experiments/monitoring

#
#-- WORK_DIR: Root directory for the temporary working directory
#             (for production runs use $TMPDIR on NEC)
#

WORK_DIR=/work/ollie/acauquoi/mpi-esm-wiso/echam6/experiments/piControl_wiso_v1.2/work

#
#-- Path to the IMDI function directory
#

export PATH=$MODEL_DIR/util/running/functions:$MODEL_DIR/util:$PATH

#------------------------------------------------------------------------------
#   UNIX COMMANDS
#------------------------------------------------------------------------------

mkdir () { command mkdir -vp "$@"; }
rm () { command rm -vf "$@"; }

time_diff () { command time_diff -c$CALENDAR "$@"; }
function calc_date  {
    typeset command="$1"
    shift
    command calc_date $command -c$CALENDAR "$@"
}

###############################################################################
#
#      END OF THE USER INTERFACE
#
###############################################################################

#------------------------------------------------------------------------------
#  Complete setup 
#------------------------------------------------------------------------------

#
#-- ECHAM
#
ATM_TIME_STEP=450

#------------------------------------------------------------------------------
#   Job specification
#------------------------------------------------------------------------------

job=${SLURM_JOB_NAME:-${EXP_ID}_run}
jobid=${SLURM_JOBID:-$$}
jobdir=${SCRIPT_DIR} # script directory

#------------------------------------------------------------------------------
#
#     3. CALENDAR
#
#------------------------------------------------------------------------------
#
#-- calculate length of the run in seconds for the case that (optionally)
#   the length of run is given in number of model steps of any of the models.
#
if   [ "${nstep_atm}" -ne 0 ] && [ "${nstep_atm}" -ne "" ]; then
  (( nsecond = nstep_atm * ATM_TIME_STEP ))
fi

#
#-- find out smallest time unit in inidate and job length
#

format=
if [ ${nsecond} -ne 0 ]; then
  format=-s
elif [ ${nminute} -ne 0 ]; then
  format=-m
elif [ ${nhour} -ne 0 ]; then
  format=-h
fi
# transform to format (YearMMDD_hhmmss)
inidate=`format_date $format -- ${initial_date}`
findate=`format_date $format -- ${final_date}`

#
# Read date and register of this run
#

cd ${jobdir}

datefmt='%a %b %d %H:%M:%S %Z %Y'  # date format for EXP_ID.log file

read startdate jobnum < ${EXP_ID}.date

# Compute dependent date variables

nextdate=$(calc_date plus -Y${nyear} -M${nmonth} -D${nday} -h${nhour} -m${nminute} -s${nsecond} -- ${startdate}_)
enddate=$(calc_date minus -D1 -- ${nextdate}_)
endtime=$(calc_date minus -s$((ATM_TIME_STEP * 2)) -- ${nextdate}_)
endtime=${endtime//_/}

logstamp=$(date +"${datefmt}")
cp ${EXP_ID}.log ${EXP_ID}.log.new &&
echo "$logstamp :  ${jobnum} ${startdate} ${jobid}  - start" >> ${EXP_ID}.log.new &&
mv ${EXP_ID}.log.new ${EXP_ID}.log ||
    die "error saving experiment status, check disk space and quota for $jobdir"

# Check available disk space on data directory

mkdir $DATA_DIR
(( $(stat -f -c'100*%a/%b' $DATA_DIR) > 0 )) ||
    die "< 1% free on data file system ($DATA_DIR), bailing out"

# Move previous log file to log directory

prevstartdate=$(calc_date minus -M12 -- ${startdate}_)
prevstartdate=$(calc_date minus -D0 -- ${prevstartdate}_)

mkdir $LOG_DIR
for log_path in $(grep -El "$print_re: model run finished for $prevstartdate" $SCRIPT_DIR/${EXP_ID}_run*_[0-9]*.log || :)
do
    log_file=${log_path##*/}
    # The * after run might contain underscores or numbers,
    # so make sure we only take the latter part as previous job's id
    log_prefix=${log_file%_[0-9]*.log}
    log_suffix=${log_file#$log_prefix}
    mv $log_path $LOG_DIR/${EXP_ID}_run_${prevstartdate}$log_suffix
done

#------------------------------------------------------------------------------
#   PRE - PROCESSING : check working directory, clean, and cd
#------------------------------------------------------------------------------

# Temporary directory

run_dir=$WORK_DIR/run_$startdate-$enddate

print "model run started for $startdate-$enddate"
print "in $run_dir"

[[ -d $run_dir ]] &&
    warn "run for $startdate-$enddate failed or still running; removing temp dir"
rm -r $run_dir
mkdir $run_dir
cd $run_dir

#------------------------------------------------------------------------------
#     PRE - PROCESSING : provide the input data 
#------------------------------------------------------------------------------

print "preparing input data for $startdate started"

# Set date variables for input files

prevdate=$(calc_date minus -D1 -- ${startdate}_)

startvals=($(format_date -f4 ${startdate}_))
endvals=($(format_date -f4 ${enddate}_))

yr0=$(printf %04d ${startvals[0]})
yrN=$(printf %04d ${endvals[0]})

startmonth=${startvals[1]}

# Format input files using date variables

# $Id: format.tmpl 9263 2017-10-25 12:36:30Z m221078 $
#
# [files]

#
#-- input files for ECHAM
#
lamip=false
isolrad=6
iaero=3
ighg=0
input_dir=${MODEL_DIR}/src/echam/input
# [files.echam]
echam_dir=${ATMO_INPUT_DIR}
ln -sfv $echam_dir/rrtmg_lw.nc .
ln -sfv $echam_dir/rrtmg_sw.nc .
ln -sfv $echam_dir/ECHAM6_CldOptProps.nc .
if [[ ${iaero} = 8 || ${iaero} = 9 ]]; then
   ln -sfv $echam_dir/MAC-SP.nc .
fi
#---wiso-code
if [ "${lwiso}" = "true" ]; then
  wiso_dir=$input_dir/iniwiso
  ln -sfv $wiso_dir/${ATM_RES}_wisosw_d.nc unit.25
fi
#---wiso-code-end

# [files.echam.mapped]
mapped_dir=$echam_dir/${ATM_RES}
ln -sfv $mapped_dir/${ATM_RES}${OCE_RES}_VGRATCLIM.nc unit.91
ln -sfv $mapped_dir/${ATM_RES}${OCE_RES}_VLTCLIM.nc unit.90
ln -sfv $mapped_dir/${ATM_RES}_TSLCLIM.nc unit.92
ln -sfv $mapped_dir/${ATM_RES}L${ATM_LEVELS}_jan_spec.nc unit.23
ln -sfv $mapped_dir/${ATM_RES}${OCE_RES}_jan_surf.nc unit.24

if [[ ${lamip} = "false" ]]; then
amip_dir=$input_dir/climatology
ln -sfv $amip_dir/${ATM_RES}_amipsic_pcmdi_187001-189912.nc unit.96
ln -sfv $amip_dir/${ATM_RES}_amipsst_pcmdi_187001-189912.nc unit.20

# [files.echam.varying]
for((yr = yr0 + -2; yr <= yrN + 1; ++yr)) 
do
    varying_dir=$echam_dir

    # [files.echam.varying.mapped]
    mapped_dir=$varying_dir/${ATM_RES}

    # [files.echam.varying.mapped.ozone]
    ozone_dir=$mapped_dir/ozone
    ln -sfv $ozone_dir/${ATM_RES}_ozone_picontrol.nc ozon${yr}

    # [files.echam.varying.mapped.volcano_aerosols]
    if [[ ${iaero} = 5 || ${iaero} = 6 || ${iaero} = 8 ]]; then
       strat_aerosol_dir=$mapped_dir/volcano_aerosols
       ln -sfv $strat_aerosol_dir/strat_aerosol_ir_${ATM_RES}_1850.nc  strat_aerosol_ir_${yr}.nc
       ln -sfv $strat_aerosol_dir/strat_aerosol_sw_${ATM_RES}_1850.nc  strat_aerosol_sw_${yr}.nc
    fi
done # offsets

# [files.echam.varying.mapped.aero]
if [[ ${iaero} = 3 ||${iaero} = 5 || ${iaero} = 6 || ${iaero} = 7 ]]; then
    yr0_aero=yr0
    yrN_aero=yrN
fi
if [[ ${iaero} = 8 ]]; then
    yr0_aero=1850
    yrN_aero=1850
fi

for((yr = yr0_aero + -2; yr <= yrN_aero + 1; ++yr))
do
    aero_fin_dir=$mapped_dir/aero
    ln -sfv $aero_fin_dir/${ATM_RES}_aeropt_kinne_sw_b14_fin_1865.nc \
        aero_fine_${yr}.nc
    aero_dir=$mapped_dir/aero
    ln -sfv $aero_dir/${ATM_RES}_aeropt_kinne_sw_b14_coa.nc aero_coarse_${yr}.nc
    ln -sfv $aero_dir/${ATM_RES}_aeropt_kinne_lw_b16_coa.nc aero_farir_${yr}.nc
done # offsets

else

# [files.echam.varying.mapped.aero]
if [[ ${iaero} = 3 ||${iaero} = 5 || ${iaero} = 6 || ${iaero} = 7 ]]; then
    yr0_aero=yr0
    yrN_aero=yrN
    aero_dir=/work/ollie/pool/ECHAM6/${ATM_RES}/aero2
    for((yr = yr0_aero + -2; yr <= yrN_aero + 1; ++yr))
    do
        if [[ $yr -le 2000 ]]; then
            ln -sfv $aero_dir/${ATM_RES}_aeropt_kinne_sw_b14_fin_${yr}.nc \
            aero_fine_${yr}.nc
        else
            ln -sfv $aero_dir/${ATM_RES}_aeropt_kinne_sw_b14_fin_rcp45_${yr}.nc \
            aero_fine_${yr}.nc
        fi
        ln -sfv $aero_dir/${ATM_RES}_aeropt_kinne_sw_b14_coa.nc aero_coarse_${yr}.nc
        ln -sfv $aero_dir/${ATM_RES}_aeropt_kinne_lw_b16_coa.nc aero_farir_${yr}.nc
    done
fi
if [[ ${iaero} = 8 ]]; then
    yr0_aero=1850
    yrN_aero=1850
    for((yr = yr0_aero + -2; yr <= yrN_aero + 1; ++yr))
    do
        aero_dir=$mapped_dir/aero
        ln -sfv $aero_dir/${ATM_RES}_aeropt_kinne_sw_b14_fin_1865.nc \
        aero_fine_${yr}.nc
        ln -sfv $aero_dir/${ATM_RES}_aeropt_kinne_sw_b14_coa.nc aero_coarse_${yr}.nc
        ln -sfv $aero_dir/${ATM_RES}_aeropt_kinne_lw_b16_coa.nc aero_farir_${yr}.nc
    done # offsets
fi

for((yr = yr0 + -2; yr <= yrN + 1; ++yr))
do
# [files.echam.mapped]
ln -sfv $mapped_dir/amip/${ATM_RES}_amipsic_${yr}.nc ice${yr}
ln -sfv $mapped_dir/amip/${ATM_RES}_amipsst_${yr}.nc sst${yr}
# [files.echam.varying]
varying_dir=$echam_dir

    # [files.echam.varying.mapped]
    mapped_dir=$varying_dir/${ATM_RES}

    # [files.echam.varying.mapped.ozone]
    if [[ $yr -le 2014 ]]; then
        ln -sfv $mapped_dir/ozone/${ATM_RES}_ozone_historical_${yr}.nc  ozon${yr}
    else
        ln -sfv $mapped_dir/ozone/${ATM_RES}_ozone_historical_2014.nc  ozon${yr}
        echo "Sorry: no ozone data available for years after 2014, copying 2014 instead"
    fi

    # [files.echam.varying.mapped.volcano_aerosols]
    if [[ ${iaero} = 5 || ${iaero} = 6 || ${iaero} = 8 ]]; then
       if [[ $yr -le 2014 ]]; then
            ln -sfv $mapped_dir/volcano_aerosols/strat_aerosol_ir_${ATM_RES}_1850.nc  strat_aerosol_ir_${yr}.nc
            ln -sfv $mapped_dir/volcano_aerosols/strat_aerosol_sw_${ATM_RES}_1850.nc  strat_aerosol_sw_${yr}.nc
       else
            ln -sfv $mapped_dir/volcano_aerosols/strat_aerosol_ir_${ATM_RES}_2014.nc  strat_aerosol_ir_${yr}.nc
            ln -sfv $mapped_dir/volcano_aerosols/strat_aerosol_sw_${ATM_RES}_2014.nc  strat_aerosol_sw_${yr}.nc
            echo "Sorry: no volcano aerosol data available for years after 2014, copying 2014 instead"
       fi
    fi

    # [files.solar.varying]
    if [[ $isolrad = 1 ]]; then
      solar_dir=$varying_dir/solar_irradiance
      ln -sfv $solar_dir/swflux_14band_${yr}.nc swflux_${yr}.nc
    fi
done # offsets

# greenhouse gases
if [[ $ighg = 1 ]]; then
    ln -sfv /work/ollie/pool/ECHAM6/greenhouse.nc  greenhouse_gases.nc
fi
fi
#
#-- restart files for ECHAM
#
# [files.echam.restart]
restart_dir=${ATMO_RESTART_DIR}
install -pvm 644 $restart_dir/restart_${EXP_ID}_echam_${prevdate}.nc \
    restart_${EXP_ID}_echam.nc
install -pvm 644 $restart_dir/restart_${EXP_ID}_co2_${prevdate}.nc \
    restart_${EXP_ID}_co2.nc
install -pvm 644 $restart_dir/restart_${EXP_ID}_accw_${prevdate}.nc \
    restart_${EXP_ID}_accw.nc
#---wiso-code
if [ "${lwiso}" = "true" ]; then
  install -pvm 644 $restart_dir/restart_${EXP_ID}_wiso_${prevdate}.nc \
      restart_${EXP_ID}_wiso.nc
  install -pvm 644 $restart_dir/restart_${EXP_ID}_accw_wiso_${prevdate}.nc \
      restart_${EXP_ID}_accw_wiso.nc
fi
#---wiso-code-end

#
#-- input files for JSBACH/HD
#
# [files.jsbach]
jsbach_dir=${LAND_INPUT_DIR}

# [files.jsbach.resources]
ln -sfv ${MODEL_DIR}/util/running/adjunct_files/jsbach/lctlib_nlct21.def \
    lctlib.def

# [files.jsbach.mapped]
mapped_dir=$jsbach_dir/${ATM_RES}
ln -sfv $mapped_dir/jsbach_${ATM_RES}${OCE_RES}_11tiles_5layers_1850_no-dynveg.nc \
    jsbach.nc

# [files.jsbach.mapped.landuse]
if [[ ${lamip} = "false" ]]; then

for((yr = yr0 + -1; yr <= yrN + 0; ++yr)) 
do
    landuse_dir=$mapped_dir/New_Hampshire_LCC
    ln -sfv $landuse_dir/no_LUH_transitions_${ATM_RES}.nc \
        landuseTransitions.${yr}.nc
    landuse_dir_harvest=$mapped_dir/New_Hampshire_LCC/hist_harvest
    ln -sfv $landuse_dir_harvest/LUH_harvest_${ATM_RES}_1850.nc \
        landuseHarvest.${yr}.nc
done # offsets

else

for((yr = yr0 + -1; yr <= yrN + 0; ++yr))
do
    landuse_dir=$mapped_dir/New_Hampshire_LCC
    if [[ $yr -le 2010 ]]; then
        ln -sfv $landuse_dir/hist/LUH_transitions_${ATM_RES}_${yr}.nc \
            landuseTransitions.${yr}.nc
        ln -sfv $landuse_dir/hist/LUH_harvest_${ATM_RES}_${yr}.nc \
            landuseHarvest.${yr}.nc
    else
        ln -sfv $landuse_dir/hist/LUH_transitions_${ATM_RES}_2010.nc \
           landuseTransitions.${yr}.nc
        ln -sfv $landuse_dir/hist/LUH_harvest_${ATM_RES}_2010.nc \
           landuseHarvest.${yr}.nc
        echo "Sorry: no land use data available for years after 2010, copying 2010 instead"
    fi
done # offsets

fi

# [files.jsbach.hydro]
hydro_dir=${HYDRO_INPUT_DIR}
ln -sfv $hydro_dir/hdpara.nc hdpara.nc
ln -sfv $hydro_dir/hdstart.nc hdstart.nc
ln -sfv $hydro_dir/rmp_${ATM_RES}_to_hd.nc rmp_hd.nc

#
#-- restart files for JSBACH/HD
#
# [files.jsbach.restart]
restart_dir=${LAND_RESTART_DIR}
install -pvm 644 $restart_dir/restart_${EXP_ID}_jsbach_${prevdate}.nc \
    restart_${EXP_ID}_jsbach.nc
install -pvm 644 $restart_dir/restart_${EXP_ID}_veg_${prevdate}.nc \
    restart_${EXP_ID}_veg.nc
install -pvm 644 $restart_dir/restart_${EXP_ID}_surf_${prevdate}.nc \
    restart_${EXP_ID}_surf.nc
install -pvm 644 $restart_dir/restart_${EXP_ID}_yasso_${prevdate}.nc \
    restart_${EXP_ID}_yasso.nc
install -pvm 644 $restart_dir/restart_${EXP_ID}_hd_${prevdate}.nc hdrestart.nc
#---wiso-code
if [ "${lwiso}" = "true" ]; then
  install -pvm 644 $restart_dir/restart_${EXP_ID}_js_wiso_${prevdate}.nc \
      restart_${EXP_ID}_js_wiso.nc
  install -pvm 644 $restart_dir/restart_${EXP_ID}_sf_wiso_${prevdate}.nc \
      restart_${EXP_ID}_sf_wiso.nc
  install -pvm 644 $restart_dir/restart_${EXP_ID}_hd_wiso_${prevdate}.nc \
      hdrestart_wiso.nc
fi
#---wiso-code-end

print "preparing input data for $startdate finished"

#------------------------------------------------------------------------------
#    PRE - PROCESSING : provide and update configuration files (namelists etc.)
#------------------------------------------------------------------------------

print "preparing configuration files started"

#------------------------------------------------------------------------------
#-- Namelist ECHAM
#

# Adjust start date to avoid delays due to trigger initialisation
year_offset=$((nmonth/12 + (nmonth%12?1:0)))
year_offset=$((year_offset?year_offset:1))

pseudo_date_start=$(calc_date minus -Y$year_offset ${startdate}_)
pseudo_date_start=$(calc_date minus -s$ATM_TIME_STEP ${pseudo_date_start}_)
pseudo_date_start="$(format_date -f4 $pseudo_date_start)"
pseudo_date_start=${pseudo_date_start// /, }

pseudo_date_stop=$(calc_date plus -D1 ${findate}_)
pseudo_date_stop=$(calc_date minus -s$ATM_TIME_STEP ${pseudo_date_stop}_)
pseudo_date_stop="$(format_date -f4 $pseudo_date_stop)"
pseudo_date_stop=${pseudo_date_stop// /, }

step=$((86400/$ATM_TIME_STEP))

# Orbital parameters
l_orbvsop87=true
l_yr_perp=true
yr_perp=1850

cat -> namelist.echam << EOF
&runctl
    dt_start = $pseudo_date_start
    dt_stop = ${pseudo_date_stop}
    putrerun = 12, 'months', 'last', 0
    lfractional_mask = .false.
    lresume = .true.
    out_datapath = './'
    out_expname = '${EXP_ID}'
    rerun_filetype = 4
    delta_time = ${ATM_TIME_STEP}
    putdata = 1, 'months', 'last', 0
    nproma = 8
    lamip = .false.
    lcouple = .false.
    lcouple_co2 = .false.
    default_output = .false.
    l_orbvsop87 = .${l_orbvsop87}.
/
&parctl
    nproca = 24
    nprocb = 18
/
&submodelctl
    lmethox = .true.
/
&mvstreamctl ! 'default spm glm g3bm'
    filetag = 'echam'
    source = 'sp', 'gl', 'g3b'
/
&mvstreamctl ! 'default co2m'
    filetag = 'co2'
    source = 'co2'
/
&mvstreamctl ! 'default surfm'
    filetag = 'surf'
    source = 'surf'
/
&mvstreamctl ! 'default tracerm'
    filetag = 'tracer'
    source = 'tracer'
/
&mvstreamctl ! 'default jsbachm'
    filetag = 'jsbach'
    source = 'jsbach'
/
&mvstreamctl ! 'default landm'
    filetag = 'land'
    source = 'land'
/
&mvstreamctl ! 'default vegm'
    filetag = 'veg'
    source = 'veg'
/
&mvstreamctl ! 'default yassom'
    filetag = 'yasso'
    source = 'yasso'
/
&set_stream ! 'default jsbach'
    stream = 'jsbach'
    lpost = 0
/
&set_stream ! 'default land'
    stream = 'land'
    lpost = 0
/
&set_stream ! 'default veg'
    stream = 'veg'
    lpost = 0
/
&set_stream ! 'default yasso'
    stream = 'yasso'
    lpost = 0
/
&wisoctl
    lwiso = .${lwiso}.
    lwiso_rerun = .${lwiso}.
    nwiso = ${nwiso}
/
EOF

if [ "${l_orbvsop87}" = "true" ]; then

  if [ "${l_yr_perp}" = "true" ]; then
cat >> namelist.echam << EOF
&radctl
    iaero = 3
    io3 = 4
    isolrad = 6
    ich4 = 3
    ico2 = 2
    in2o = 3
    icfc = 2
    ighg = 0
    co2vmr = 284.3169860840e-06
    ch4vmr = 808.2490234375e-09
    n2ovmr = 273.0210571289e-09
    cfcvmr(1) = 0.0
    cfcvmr(2) = 0.0
    yr_perp = ${yr_perp}
/
EOF
  else
cat >> namelist.echam << EOF
&radctl
    iaero = 3
    io3 = 4
    isolrad = 6
    ich4 = 3
    ico2 = 2
    in2o = 3
    icfc = 2
    ighg = 0
    co2vmr = 284.3169860840e-06
    ch4vmr = 808.2490234375e-09
    n2ovmr = 273.0210571289e-09
    cfcvmr(1) = 0.0
    cfcvmr(2) = 0.0
/
EOF
  fi

else

cat >> namelist.echam << EOF
&radctl
    iaero = 3
    io3 = 4
    isolrad = 6
    ich4 = 3
    ico2 = 2
    in2o = 3
    icfc = 2
    ighg = 0
    co2vmr = 284.3169860840e-06
    ch4vmr = 808.2490234375e-09
    n2ovmr = 273.0210571289e-09
    cfcvmr(1) = 0.0
    cfcvmr(2) = 0.0
    cecc = 0.016724
    cobld = 23.446
    clonp = 282.04
/
EOF

fi

if [[ ${lamip} = "false" ]]; then

if [[ ${iaero} = 8 || ${iaero} = 9 ]]; then
cat >> namelist.echam << EOF
&simpleplumesctl
    fix_yr = 1990
/
EOF
fi

else

if [[ $yr0 -ge 2017 ]]; then
if [[ ${iaero} = 8 || ${iaero} = 9 ]]; then
cat >> namelist.echam << EOF
&simpleplumesctl
    fix_yr = 2016
/
EOF
fi
fi

fi

if [[ ${lamip} = "true" ]]; then
cat >> namelist.echam << EOF
&co2ctl
    lco2_scenario = .true.
/
EOF
fi

#---wiso-code
if [ "${lwiso}" = "true" ]; then
cat >> namelist.echam << EOF
&mvstreamctl ! 'default wisom'
    filetag = 'wiso'
    source = 'wiso'
/
&mvstreamctl ! 'default la_wisom'
    filetag = 'la_wiso'
    source = 'la_wiso'
/
&mvstreamctl ! 'default js_wisom'
    filetag = 'js_wiso'
    source = 'js_wiso'
/
&set_stream ! 'default wiso'
    stream = 'wiso'
    lpost = 0
/
&set_stream ! 'default js_wiso'
    stream = 'js_wiso'
    lpost = 0
/
&set_stream ! 'default la_wiso'
    stream = 'la_wiso'
    lpost = 0
/

EOF
fi
#---wiso-code-end

# Selectively add disturbance to overcome model failure
if [[ " ${ATMO_DISTURBED_YEARS} " == *" ${yr0} "* ]]; then
    print "disturbing atmosphere model in year ${yr0}"
    patch_namelist dynctl enstdif ${ATMO_DISTURBANCE} namelist.echam
fi

echo "* ----------------------------------------------------------------------"
echo "* Namelist of ECHAM: namelist.echam"
echo "* ----------------------------------------------------------------------"
cat namelist.echam
echo "* ----------------------------------------------------------------------"
echo "*    end of namelist.echam"
echo "* ----------------------------------------------------------------------"
echo ""

#
#-- Namelist JSBACH
#

cat -> namelist.jsbach <<EOF
&jsbach_ctl
    standalone = .false.
    ntiles = 11
    use_bethy = .true.
    use_phenology = .true.
    use_albedo = .true.
    with_yasso = .true.
    with_hd = .true.
    use_roughness_lai = .true.
    use_roughness_oro = .false.
    veg_at_1200 = .false.
    use_dynveg = .false.
    use_disturbance = .false.
    with_nitrogen = .false.
    lcc_forcing_type = 'transitions'
    lcc_scheme = 2
    test_cconservation = .true.
    test_nconservation = .false.
/
&soil_ctl
    nsoil = 5
/
&cbalance_ctl
    read_ndepo = .false.
/
&hydrology_ctl
    gethd = ${step}, 'steps', 'exact', 0
    puthd = ${step}, 'steps', 'exact', -${ATM_TIME_STEP}
    diag_water_budget = .true.
/

EOF

echo "* ----------------------------------------------------------------------"
echo "* Namelist of JSBACH: namelist.jsbach"
echo "* ----------------------------------------------------------------------"
cat namelist.jsbach
echo "* ----------------------------------------------------------------------"
echo "*    end of namelist.jsbach"
echo "* ----------------------------------------------------------------------"
echo ""

print "preparing configuration files finished"

#------------------------------------------------------------------------------
#
#     5. LAUNCHING THE MODEL
#
#------------------------------------------------------------------------------

print "listing files in working directory before model execution"
echo --
ls -altr
echo --

ulimit -c 0   # size of core dumps, in number of 512-byte blocks

#
###############################################################################

export ECHAM6_THREADS=1

# Submit concurrent job scripts

for job in 
do
    print "starting  job for $jobid run"
    (cd $jobdir && 
     sbatch -t $(squeue -o '%L' -P -h -j $jobid) ${EXP_ID}.${job} $jobid run)
done

print "execution of model started"

status=0
my_srun_hosts=hostfile_srun
rm -f $my_srun_hosts
echo "0-431 ${BIN_DIR}/${ATMO_EXE}" >> $my_srun_hosts
echo "content of hostfile ${my_srun_hosts}:"
cat $my_srun_hosts
srun --mpi=pmi2 -l --kill-on-bad-exit=1 --cpu_bind=cores --multi-prog $my_srun_hosts || status=$?

print "execution of model finished"

print "listing files in working directory after model execution"
echo --
ls -altr
echo --

case $status in
    0)  ;;
    127)
        print "Hey: ignoring return code $status (valid ECHAM6 return code)" ;;
    *)  print "Sorry: model returned error code $status"
        exit $status ;;
esac

if grep ERROR ${job}_${jobid}.log > /dev/null 2>&1; then
    print "Sorry: an error occurred during model integration"
    exit 1
fi

#
# Save restart files
#

print "storing of restart data started"

: > status

function tar_bg {
    typeset restdst=$(basename $1)
    typeset restdir=$(dirname $1)
    shift
    typeset restsrc="$@"
    mkdir $restdir
    (
        trap 'echo $restsrc:$? >> status' ERR
        tar -cf $restdir/$restdst $restsrc
    ) &
}
function cp_bg {
    typeset restsrc=$1
    typeset restdst=$(basename $2)
    typeset restdir=$(dirname $2)
    mkdir $restdir
    (
        trap 'echo $restsrc:$? >> status' ERR
        cp $restsrc $restdir/$restdst
    ) &
}

#  Save output of ECHAM

#---wiso-code
if [ "${lwiso}" = "true" ]; then
  substreams='echam co2 accw wiso accw_wiso'
else
  substreams='echam co2 accw'
fi
#---wiso-code-end
for substream in $substreams
do
    cp_bg restart_${EXP_ID}_${endtime}_${substream}.nc \
          $ATMO_RESTART_DIR/restart_${EXP_ID}_${substream}_${enddate}.nc
done # substreams

#  Save output of JSBACH

#---wiso-code
if [ "${lwiso}" = "true" ]; then
  substreams='jsbach veg surf yasso js_wiso sf_wiso'
else
  substreams='jsbach veg surf yasso'
fi
#---wiso-code-end
for substream in $substreams
do
    cp_bg restart_${EXP_ID}_${endtime}_${substream}.nc \
          $LAND_RESTART_DIR/restart_${EXP_ID}_${substream}_${enddate}.nc
done # substreams

cp_bg hdrestart.nc $LAND_RESTART_DIR/restart_${EXP_ID}_hd_${enddate}.nc
#---wiso-code
if [ "${lwiso}" = "true" ]; then
  cp_bg hdrestart_wiso.nc $LAND_RESTART_DIR/restart_${EXP_ID}_hd_wiso_${enddate}.nc
fi
#---wiso-code-end



# Wait for storing to complete and evaluate error messages before continuing

wait
[[ -s status ]] &&
    die "storing of restart data failed ("$(<status)")"

print "storing of restart data finished"

#
#     8. SUBMISSION OF THE NEXT JOBS
#

print 'saving experiment status'
cd ${jobdir}

# Number of the next job
(( nextjob = ${jobnum} + 1 ))

# Edit .date and .log file

space_error="no"

echo "${nextdate} ${nextjob}" > ${EXP_ID}.date.new || {
    space_error="yes"; print "Sorry: cannot create ${EXP_ID}.date";
}
cp ${EXP_ID}.log ${EXP_ID}.log.new || {
    space_error="yes"; print "Sorry: cannot save ${EXP_ID}.log";
}
echo "$(date +"${datefmt}") :  ${jobnum} ${nextdate} ${jobid}  - done" >> ${EXP_ID}.log.new || {
    space_error="yes"; print "Sorry: cannot append to ${EXP_ID}.log";
}

if [ "${space_error}" = "no" ]; then
    mv ${EXP_ID}.date.new ${EXP_ID}.date
    mv ${EXP_ID}.log.new ${EXP_ID}.log
else
    print "Sorry: error saving experiment status, check disk space and quota for"
    print "Sorry: $jobdir"
    exit 1
fi

# Update run dates and submit job scripts
# $Id: trigger.tmpl 9726 2019-02-05 13:54:15Z m221078 $

# Check for specialized scripts
function get_script {
    typeset EXP_ID=$1
    typeset job=$2
    typeset startdate=$3
    typeset script=$EXP_ID.$job
    typeset special_script dates firstdate lastdate
    for special_script in \
        $EXP_ID.$job.$startdate \
        $EXP_ID.$job.*[0-9][0-9][0-9][0-9][0-9]-*[0-9][0-9][0-9][0-9][0-9]
    do
        if [ -f $special_script ]
        then
            dates=${special_script#$EXP_ID.$job.}
            firstdate=${dates%-*}
            lastdate=${dates#*-}
            if [[ $(later_date -- $startdate $firstdate) == $startdate &&
                  $(later_date -- $startdate $lastdate) == $lastdate ]]
            then
                print "Hey: using specialized $job script '$special_script'" >&2
                script=$special_script
                break
            fi
        fi
    done
    echo $script
}

print "starting store job for $startdate"
sbatch $(get_script $EXP_ID store $startdate) $startdate

# Check whether final date is reached; otherwise submit follow-up job
if [[ $(later_date -- $nextdate $findate) == $nextdate ]]
then
    print "experiment finished"
    logstamp=$(date +"$datefmt")
    echo "$logstamp :  Experiment over" >> $EXP_ID.log
else
    print "starting run job for $nextdate"
    sbatch $(get_script $EXP_ID run $nextdate)
fi

#------------------------------------------------------------------------------
#   EPILOGUE
#------------------------------------------------------------------------------

print "model run finished for $startdate-$enddate"

